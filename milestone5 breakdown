1. Create CPQG & CPG tables
	
CREATE TABLE CPQG (
	co_number varchar(15) NOT NULL,
	f_name varchar(40) NOT NULL,
	quarter varchar(10) NOT NULL,
	year integer,
	a integer,
	b integer,
	c integer,
	d integer,
	other integer
);

CREATE TABLE CPG (
	co_number varchar(15) NOT NULL,
	f_name varchar(40) NOT NULL,
	a integer,
	b integer,
	c integer,
	d integer,
	other integer
);

2. Load Data from Demo
INSERT INTO CPQG (co_number, f_name, quarter, year, a, b, c, d, other) VALUES 
	('cse8a', 'Justin Bieber', 'Winter', 2017, 1, 1, 0, 0, 0),
	('cse8a', 'Selena Gomez', 'Fall', 2017, 0, 0, 1, 0, 0),
	('cse8a', 'Kelly Clarkson', 'Winter', 2018, 1, 1, 0, 0, 0),
	('cse105', 'Taylor Swift', 'Spring', 2017, 1, 1, 1, 0, 0),
	('cse250a', 'Bjork', 'Winter', 2017, 0, 0, 1, 0, 0),
	('cse250a', 'Bjork', 'Winter', 2018, 0, 1, 0, 1, 1),
	('cse250b', 'Justin Bieber', 'Spring', 2017, 2, 0, 0, 0, 0),
	('cse255', 'Justin Bieber', 'Winter', 2018, 0, 2, 0, 0, 1),
	('cse232a', 'Kelly Clarkson', 'Winter', 2018, 1, 0, 0, 0, 0),
	('cse221', 'Justin Bieber', 'Fall', 2017, 2, 0, 0, 0, 0),
	('mae107', 'Bjork', 'Fall', 2017, 0, 1, 0, 0, 0),
	('mae108', 'Selena Gomez', 'Winter', 2017, 1, 1, 0, 0, 0),
	('mae108', 'Selena Gomez', 'Spring', 2017, 0, 2, 0, 0, 0),
	('phil10', 'Bjork', 'Winter', 2018, 2, 0, 2, 0, 0),
	('phil165', 'Flo Rida', 'Fall', 2017, 0, 0, 0, 1, 1),
	('phil165', 'Adam Levine', 'Winter', 2018, 1, 0, 0, 0, 0);

INSERT INTO CPG (co_number, f_name, a, b, c, d, other) VALUES 
	('cse8a', 'Justin Bieber', 1, 1, 0, 0, 0),
	('cse8a', 'Selena Gomez', 0, 0, 1, 0, 0),
	('cse8a', 'Kelly Clarkson', 1, 1, 0, 0, 0),
	('cse105', 'Taylor Swift', 1, 1, 1, 0, 0),
	('cse250a', 'Bjork', 0, 1, 1, 1, 1),
	('cse250b', 'Justin Bieber', 2, 0, 0, 0, 0),
	('cse255', 'Justin Bieber', 0, 2, 0, 0, 1),
	('cse232a', 'Kelly Clarkson', 1, 0, 0, 0, 0),
	('cse221', 'Justin Bieber', 2, 0, 0, 0, 0),
	('mae107', 'Bjork', 0, 1, 0, 0, 0),
	('mae108', 'Selena Gomez', 1, 3, 0, 0, 0),
	('phil10', 'Bjork', 2, 0, 2, 0, 0),
	('phil165', 'Flo Rida', 0, 0, 0, 1, 1),
	('phil165', 'Adam Levine', 1, 0, 0, 0, 0);

3. Rewrite queries using these tables 
	SELECT a, b, c, d, other FROM CPQG WHERE course = INPUT.co_number AND quarter = INPUT.quarter AND year = INPUT.year AND professor = INPUT.f_name

	SELECT a, b, c, d, other FROM CPG WHERE course =  INPUT.co_number AND professor = INPUT.f_name

4. Create form for inserting/updating a student's grade.

5. Write triggers for inserting/updating that incrementally update your two tables.
	CREATE OR REPLACE FUNCTION second()
	RETURNS trigger AS
	$$
	BEGIN
	IF NEW.co_number = (SELECT co_number FROM class) AND NEW.section_id = (SELECT section_id FROM class) AND class.enroll_limit = (SELECT COUNT(*) FROM course_enrollment ce WHERE ce.co_number = NEW.co_number AND ce.section_id = NEW.section_id)
	    THEN RAISE EXCEPTION 'Enrollment Limit Already Reached';
	ELSE 
	    RAISE NOTICE 'Insertion Successful'
	END IF;
	END;
	$$
	LANGUAGE plpgsql;

	CREATE TRIGGER handle_class_time
	BEFORE INSERT OR UPDATE ON course_enrollment
	FOR EACH ROW EXECUTE PROCEDURE second(); 

